{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Desktop\\\\mood_recomendation_song\\\\client\\\\src\\\\components\\\\SongList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SongList = ({\n  songs,\n  playlistInfo\n}) => {\n  _s();\n  const [currentlyPlaying, setCurrentlyPlaying] = useState(null);\n  const handlePlay = (songId, previewUrl) => {\n    if (!previewUrl) {\n      alert('Sorry, no preview available for this song');\n      return;\n    }\n\n    // Stop currently playing audio if any\n    if (currentlyPlaying) {\n      const audioElement = document.getElementById(`audio-${currentlyPlaying}`);\n      if (audioElement) {\n        audioElement.pause();\n      }\n    }\n\n    // Play the new audio or toggle if it's the same song\n    if (currentlyPlaying === songId) {\n      setCurrentlyPlaying(null);\n    } else {\n      const audioElement = document.getElementById(`audio-${songId}`);\n      if (audioElement) {\n        audioElement.play();\n        setCurrentlyPlaying(songId);\n\n        // When audio ends, reset the currently playing state\n        audioElement.onended = () => {\n          setCurrentlyPlaying(null);\n        };\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"song-list-container\",\n    children: [playlistInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Based on the \\\"\", playlistInfo.name, \"\\\" playlist\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: playlistInfo.url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"btn-primary\",\n        children: \"Open in Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Recommended Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"songs-grid\",\n      children: songs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: song.image || 'https://via.placeholder.com/100',\n          alt: song.name,\n          className: \"song-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"song-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"song-title\",\n            children: song.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"song-artist\",\n            children: song.artist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"song-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-primary\",\n              onClick: () => handlePlay(song.id, song.preview_url),\n              children: currentlyPlaying === song.id ? 'Pause' : 'Play Preview'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: song.spotify_url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"btn-secondary\",\n              children: \"Open in Spotify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), song.preview_url && /*#__PURE__*/_jsxDEV(\"audio\", {\n            id: `audio-${song.id}`,\n            src: song.preview_url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, song.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(SongList, \"wt0MblHISxck6REQhUiiwt8h/FU=\");\n_c = SongList;\nexport default SongList;\nvar _c;\n$RefreshReg$(_c, \"SongList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SongList","songs","playlistInfo","_s","currentlyPlaying","setCurrentlyPlaying","handlePlay","songId","previewUrl","alert","audioElement","document","getElementById","pause","play","onended","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","href","url","target","rel","map","song","src","image","alt","artist","onClick","id","preview_url","spotify_url","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Desktop/mood_recomendation_song/client/src/components/SongList.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst SongList = ({ songs, playlistInfo }) => {\r\n  const [currentlyPlaying, setCurrentlyPlaying] = useState(null);\r\n\r\n  const handlePlay = (songId, previewUrl) => {\r\n    if (!previewUrl) {\r\n      alert('Sorry, no preview available for this song');\r\n      return;\r\n    }\r\n\r\n    // Stop currently playing audio if any\r\n    if (currentlyPlaying) {\r\n      const audioElement = document.getElementById(`audio-${currentlyPlaying}`);\r\n      if (audioElement) {\r\n        audioElement.pause();\r\n      }\r\n    }\r\n\r\n    // Play the new audio or toggle if it's the same song\r\n    if (currentlyPlaying === songId) {\r\n      setCurrentlyPlaying(null);\r\n    } else {\r\n      const audioElement = document.getElementById(`audio-${songId}`);\r\n      if (audioElement) {\r\n        audioElement.play();\r\n        setCurrentlyPlaying(songId);\r\n        \r\n        // When audio ends, reset the currently playing state\r\n        audioElement.onended = () => {\r\n          setCurrentlyPlaying(null);\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"song-list-container\">\r\n      {playlistInfo && (\r\n        <div className=\"playlist-info\">\r\n          <h2>Based on the \"{playlistInfo.name}\" playlist</h2>\r\n          <a \r\n            href={playlistInfo.url} \r\n            target=\"_blank\" \r\n            rel=\"noopener noreferrer\"\r\n            className=\"btn-primary\"\r\n          >\r\n            Open in Spotify\r\n          </a>\r\n        </div>\r\n      )}\r\n\r\n      <h3>Recommended Songs</h3>\r\n      \r\n      <div className=\"songs-grid\">\r\n        {songs.map((song) => (\r\n          <div key={song.id} className=\"song-card\">\r\n            <img \r\n              src={song.image || 'https://via.placeholder.com/100'} \r\n              alt={song.name} \r\n              className=\"song-image\" \r\n            />\r\n            <div className=\"song-info\">\r\n              <h4 className=\"song-title\">{song.name}</h4>\r\n              <p className=\"song-artist\">{song.artist}</p>\r\n              \r\n              <div className=\"song-controls\">\r\n                <button \r\n                  className=\"btn-primary\" \r\n                  onClick={() => handlePlay(song.id, song.preview_url)}\r\n                >\r\n                  {currentlyPlaying === song.id ? 'Pause' : 'Play Preview'}\r\n                </button>\r\n                \r\n                <a \r\n                  href={song.spotify_url} \r\n                  target=\"_blank\" \r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"btn-secondary\"\r\n                >\r\n                  Open in Spotify\r\n                </a>\r\n              </div>\r\n              \r\n              {song.preview_url && (\r\n                <audio id={`audio-${song.id}`} src={song.preview_url} />\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}