{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Desktop\\\\mood_recomendation_song\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MoodSelector from './components/MoodSelector';\nimport SongList from './components/SongList';\nimport Header from './components/Header';\nimport Loading from './components/Loading';\nimport axios from 'axios';\nimport './styles/index.css';\n\n// Set up axios default baseURL from environment variables\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nfunction App() {\n  _s();\n  const [selectedMood, setSelectedMood] = useState('');\n  const [songs, setSongs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [playlistInfo, setPlaylistInfo] = useState(null);\n  const [refreshCount, setRefreshCount] = useState(0);\n  const fetchRecommendations = async (mood, shouldRefresh = false, limit = 12) => {\n    setLoading(true);\n    setSongs([]);\n    setError('');\n    setPlaylistInfo(null);\n    try {\n      const response = await axios.post('/api/recommend', {\n        mood,\n        limit,\n        refresh: shouldRefresh\n      });\n      setSongs(response.data.tracks);\n      setPlaylistInfo({\n        name: response.data.playlist_name,\n        url: response.data.playlist_url,\n        mood: response.data.mood,\n        refreshed: response.data.refreshed\n      });\n      setLoading(false);\n      if (shouldRefresh) {\n        setRefreshCount(prev => prev + 1);\n      }\n    } catch (err) {\n      console.error('Error fetching songs:', err);\n      setError('Failed to fetch songs. Please try again.');\n      setLoading(false);\n    }\n  };\n  const handleMoodSelect = async mood => {\n    const isRefresh = mood === selectedMood;\n    setSelectedMood(mood);\n    await fetchRecommendations(mood, isRefresh);\n  };\n  const handleRefresh = async () => {\n    if (selectedMood) {\n      await fetchRecommendations(selectedMood, true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MoodSelector, {\n      onMoodSelect: handleMoodSelect,\n      selectedMood: selectedMood,\n      onRefresh: handleRefresh\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : songs.length > 0 && /*#__PURE__*/_jsxDEV(SongList, {\n      songs: songs,\n      playlistInfo: playlistInfo,\n      refreshCount: refreshCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this), !loading && songs.length === 0 && selectedMood && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-results\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"No songs found for the mood \\\"\", selectedMood, \"\\\". Try a different mood.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ihlr1y3Xt/BGuO5FY36+I8MF8oY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MoodSelector","SongList","Header","Loading","axios","jsxDEV","_jsxDEV","defaults","baseURL","process","env","REACT_APP_API_URL","App","_s","selectedMood","setSelectedMood","songs","setSongs","loading","setLoading","error","setError","playlistInfo","setPlaylistInfo","refreshCount","setRefreshCount","fetchRecommendations","mood","shouldRefresh","limit","response","post","refresh","data","tracks","name","playlist_name","url","playlist_url","refreshed","prev","err","console","handleMoodSelect","isRefresh","handleRefresh","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMoodSelect","onRefresh","length","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Desktop/mood_recomendation_song/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport MoodSelector from './components/MoodSelector';\r\nimport SongList from './components/SongList';\r\nimport Header from './components/Header';\r\nimport Loading from './components/Loading';\r\nimport axios from 'axios';\r\nimport './styles/index.css';\r\n\r\n// Set up axios default baseURL from environment variables\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nfunction App() {\r\n  const [selectedMood, setSelectedMood] = useState('');\r\n  const [songs, setSongs] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [playlistInfo, setPlaylistInfo] = useState(null);\r\n  const [refreshCount, setRefreshCount] = useState(0);\r\n\r\n  const fetchRecommendations = async (mood, shouldRefresh = false, limit = 12) => {\r\n    setLoading(true);\r\n    setSongs([]);\r\n    setError('');\r\n    setPlaylistInfo(null);\r\n\r\n    try {\r\n      const response = await axios.post('/api/recommend', { \r\n        mood, \r\n        limit,\r\n        refresh: shouldRefresh \r\n      });\r\n      \r\n      setSongs(response.data.tracks);\r\n      setPlaylistInfo({\r\n        name: response.data.playlist_name,\r\n        url: response.data.playlist_url,\r\n        mood: response.data.mood,\r\n        refreshed: response.data.refreshed\r\n      });\r\n      setLoading(false);\r\n      \r\n      if (shouldRefresh) {\r\n        setRefreshCount(prev => prev + 1);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching songs:', err);\r\n      setError('Failed to fetch songs. Please try again.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMoodSelect = async (mood) => {\r\n    const isRefresh = mood === selectedMood;\r\n    setSelectedMood(mood);\r\n    await fetchRecommendations(mood, isRefresh);\r\n  };\r\n\r\n  const handleRefresh = async () => {\r\n    if (selectedMood) {\r\n      await fetchRecommendations(selectedMood, true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <MoodSelector \r\n        onMoodSelect={handleMoodSelect} \r\n        selectedMood={selectedMood}\r\n        onRefresh={handleRefresh}\r\n      />\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      \r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        songs.length > 0 && (\r\n          <SongList \r\n            songs={songs} \r\n            playlistInfo={playlistInfo} \r\n            refreshCount={refreshCount}\r\n          />\r\n        )\r\n      )}\r\n\r\n      {!loading && songs.length === 0 && selectedMood && !error && (\r\n        <div className=\"no-results\">\r\n          <p>No songs found for the mood \"{selectedMood}\". Try a different mood.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}