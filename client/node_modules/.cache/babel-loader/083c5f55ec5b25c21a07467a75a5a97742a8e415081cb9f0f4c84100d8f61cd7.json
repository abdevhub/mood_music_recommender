{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Desktop\\\\mood_recomendation_song\\\\client\\\\src\\\\components\\\\SongList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SongList = ({\n  songs,\n  playlistInfo,\n  refreshCount\n}) => {\n  _s();\n  const [currentlyPlaying, setCurrentlyPlaying] = useState(null);\n  const [showRefreshAnimation, setShowRefreshAnimation] = useState(false);\n\n  // Effect to show refresh animation when refresh count changes\n  useEffect(() => {\n    if (refreshCount > 0) {\n      setShowRefreshAnimation(true);\n      const timer = setTimeout(() => {\n        setShowRefreshAnimation(false);\n      }, 1500);\n      return () => clearTimeout(timer);\n    }\n  }, [refreshCount]);\n\n  // Stop audio playback when songs change\n  useEffect(() => {\n    if (currentlyPlaying) {\n      const audioElement = document.getElementById(`audio-${currentlyPlaying}`);\n      if (audioElement) {\n        audioElement.pause();\n      }\n      setCurrentlyPlaying(null);\n    }\n  }, [songs]);\n  const handlePlay = (songId, previewUrl) => {\n    if (!previewUrl) {\n      alert('Sorry, no preview available for this song');\n      return;\n    }\n\n    // Stop currently playing audio if any\n    if (currentlyPlaying) {\n      const audioElement = document.getElementById(`audio-${currentlyPlaying}`);\n      if (audioElement) {\n        audioElement.pause();\n      }\n    }\n\n    // Play the new audio or toggle if it's the same song\n    if (currentlyPlaying === songId) {\n      setCurrentlyPlaying(null);\n    } else {\n      const audioElement = document.getElementById(`audio-${songId}`);\n      if (audioElement) {\n        audioElement.play();\n        setCurrentlyPlaying(songId);\n\n        // When audio ends, reset the currently playing state\n        audioElement.onended = () => {\n          setCurrentlyPlaying(null);\n        };\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `song-list-container ${showRefreshAnimation ? 'refresh-animation' : ''}`,\n    children: [playlistInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Based on the \\\"\", playlistInfo.name, \"\\\" playlist\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: playlistInfo.url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"btn-primary\",\n        children: \"Open in Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Recommended Songs \", (playlistInfo === null || playlistInfo === void 0 ? void 0 : playlistInfo.refreshed) && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"refreshed-badge\",\n        children: \"New Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 57\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"songs-grid\",\n      children: songs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: song.image || 'https://via.placeholder.com/100',\n          alt: song.name,\n          className: \"song-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"song-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"song-title\",\n            children: song.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"song-artist\",\n            children: song.artist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"song-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-primary\",\n              onClick: () => handlePlay(song.id, song.preview_url),\n              children: currentlyPlaying === song.id ? 'Pause' : 'Play Preview'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: song.spotify_url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"btn-secondary\",\n              children: \"Open in Spotify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), song.preview_url && /*#__PURE__*/_jsxDEV(\"audio\", {\n            id: `audio-${song.id}`,\n            src: song.preview_url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, song.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(SongList, \"Z2Y/FeNDf3Jh+lWlPn8XAqisjCA=\");\n_c = SongList;\nexport default SongList;\nvar _c;\n$RefreshReg$(_c, \"SongList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SongList","songs","playlistInfo","refreshCount","_s","currentlyPlaying","setCurrentlyPlaying","showRefreshAnimation","setShowRefreshAnimation","timer","setTimeout","clearTimeout","audioElement","document","getElementById","pause","handlePlay","songId","previewUrl","alert","play","onended","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","href","url","target","rel","refreshed","map","song","src","image","alt","artist","onClick","id","preview_url","spotify_url","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Desktop/mood_recomendation_song/client/src/components/SongList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst SongList = ({ songs, playlistInfo, refreshCount }) => {\r\n  const [currentlyPlaying, setCurrentlyPlaying] = useState(null);\r\n  const [showRefreshAnimation, setShowRefreshAnimation] = useState(false);\r\n\r\n  // Effect to show refresh animation when refresh count changes\r\n  useEffect(() => {\r\n    if (refreshCount > 0) {\r\n      setShowRefreshAnimation(true);\r\n      const timer = setTimeout(() => {\r\n        setShowRefreshAnimation(false);\r\n      }, 1500);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [refreshCount]);\r\n\r\n  // Stop audio playback when songs change\r\n  useEffect(() => {\r\n    if (currentlyPlaying) {\r\n      const audioElement = document.getElementById(`audio-${currentlyPlaying}`);\r\n      if (audioElement) {\r\n        audioElement.pause();\r\n      }\r\n      setCurrentlyPlaying(null);\r\n    }\r\n  }, [songs]);\r\n\r\n  const handlePlay = (songId, previewUrl) => {\r\n    if (!previewUrl) {\r\n      alert('Sorry, no preview available for this song');\r\n      return;\r\n    }\r\n\r\n    // Stop currently playing audio if any\r\n    if (currentlyPlaying) {\r\n      const audioElement = document.getElementById(`audio-${currentlyPlaying}`);\r\n      if (audioElement) {\r\n        audioElement.pause();\r\n      }\r\n    }\r\n\r\n    // Play the new audio or toggle if it's the same song\r\n    if (currentlyPlaying === songId) {\r\n      setCurrentlyPlaying(null);\r\n    } else {\r\n      const audioElement = document.getElementById(`audio-${songId}`);\r\n      if (audioElement) {\r\n        audioElement.play();\r\n        setCurrentlyPlaying(songId);\r\n        \r\n        // When audio ends, reset the currently playing state\r\n        audioElement.onended = () => {\r\n          setCurrentlyPlaying(null);\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`song-list-container ${showRefreshAnimation ? 'refresh-animation' : ''}`}>\r\n      {playlistInfo && (\r\n        <div className=\"playlist-info\">\r\n          <h2>Based on the \"{playlistInfo.name}\" playlist</h2>\r\n          <a \r\n            href={playlistInfo.url} \r\n            target=\"_blank\" \r\n            rel=\"noopener noreferrer\"\r\n            className=\"btn-primary\"\r\n          >\r\n            Open in Spotify\r\n          </a>\r\n        </div>\r\n      )}\r\n\r\n      <h3>Recommended Songs {playlistInfo?.refreshed && <span className=\"refreshed-badge\">New Selection</span>}</h3>\r\n      \r\n      <div className=\"songs-grid\">\r\n        {songs.map((song) => (\r\n          <div key={song.id} className=\"song-card\">\r\n            <img \r\n              src={song.image || 'https://via.placeholder.com/100'} \r\n              alt={song.name} \r\n              className=\"song-image\" \r\n            />\r\n            <div className=\"song-info\">\r\n              <h4 className=\"song-title\">{song.name}</h4>\r\n              <p className=\"song-artist\">{song.artist}</p>\r\n              \r\n              <div className=\"song-controls\">\r\n                <button \r\n                  className=\"btn-primary\" \r\n                  onClick={() => handlePlay(song.id, song.preview_url)}\r\n                >\r\n                  {currentlyPlaying === song.id ? 'Pause' : 'Play Preview'}\r\n                </button>\r\n                \r\n                <a \r\n                  href={song.spotify_url} \r\n                  target=\"_blank\" \r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"btn-secondary\"\r\n                >\r\n                  Open in Spotify\r\n                </a>\r\n              </div>\r\n              \r\n              {song.preview_url && (\r\n                <audio id={`audio-${song.id}`} src={song.preview_url} />\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}